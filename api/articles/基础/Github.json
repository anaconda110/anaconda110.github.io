{"title":"Github","uid":"cc217f8ad2b16d80f09e9b03836cc169","slug":"基础/Github","date":"2024-08-02T09:28:21.000Z","updated":"2025-06-28T08:24:42.438Z","comments":true,"path":"api/articles/基础/Github.json","keywords":null,"cover":"https://cover.png","content":"<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"**GitHub **\"></a>**GitHub **</h2><h3 id=\"GitHub命令\"><a href=\"#GitHub命令\" class=\"headerlink\" title=\"GitHub命令\"></a><strong>GitHub命令</strong></h3><h4 id=\"配置密匙\"><a href=\"#配置密匙\" class=\"headerlink\" title=\"配置密匙\"></a>配置密匙</h4><p><strong>步骤：</strong></p>\n<p>​     <strong>①生成客户端公私玥文件</strong></p>\n<p>​      生成公私玥对指令（需先自行安装OpenSSH）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​     <strong>②将公钥上传到Github</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/anaconda110/MyPic/img/img/clip_image002.jpg\"></p>\n<h4 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;用户名&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除全局配置\"><a href=\"#删除全局配置\" class=\"headerlink\" title=\"删除全局配置\"></a>删除全局配置</h4><p>要删除本地全局设置的 Git 邮箱，你可以使用 <code>git config</code> 命令并指定 <code>--global</code> 选项来移除全局配置中的邮箱地址。以下是具体步骤：</p>\n<ol>\n<li><p>打开命令行或终端。</p>\n</li>\n<li><p>输入以下命令来列出当前的全局 Git 配置，以确认你的全局邮箱地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到设置邮箱的行，它看起来像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plaintext</span><br><span class=\"line\">user.email=your_email@example.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用以下命令来删除全局配置中的邮箱地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> user.email</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再次使用 <code>--list</code> 选项来确认邮箱地址已经被删除：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --list</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"将本地仓库首次推送到GitHub\"><a href=\"#将本地仓库首次推送到GitHub\" class=\"headerlink\" title=\"将本地仓库首次推送到GitHub\"></a>将本地仓库首次推送到GitHub</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;#hexo-blog&quot; &gt;&gt; README.md</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git remote add origin git@github.com:anaconda110/hexo-blog.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"推送行提示符问题\"><a href=\"#推送行提示符问题\" class=\"headerlink\" title=\"推送行提示符问题\"></a>推送行提示符问题</h4><p>要让 Git 在处理行结束符时不对它们做出更改，你需要设置 <code>core.autocrlf</code> 配置选项为 <code>false</code>。这会告诉 Git 不要在提交时将行结束符从 LF 转换为 CRLF，也不会在检出时将它们从 CRLF 转换回 LF。</p>\n<p>以下是如何在 Git 中设置此选项的步骤：</p>\n<ol>\n<li><p>打开命令行或终端。</p>\n</li>\n<li><p>输入以下命令来设置 <code>core.autocrlf</code> 为 <code>false</code>。这将应用到当前仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.autocrlf <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果你想要为所有仓库设置这个选项，可以使用 <code>--global</code> 标志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>请注意，将 <code>core.autocrlf</code> 设置为 <code>false</code> 可能会导致在 Windows 系统上使用文本编辑器打开文件时出现不一致的行结束符。如果你在 Windows 上工作，通常建议将此选项设置为 <code>true</code> 或 <code>input</code> 以避免这些问题。</p>\n<ul>\n<li><p>设置为 <code>true</code> 会在检出到工作目录时转换 CRLF 为 LF，并在提交时转换 LF 回 CRLF。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置为 <code>input</code> 会在提交时将 CRLF 转换为 LF，但不在检出时转换回 CRLF。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>选择哪个选项取决于你的开发环境和个人偏好。如果你主要在 Unix-like 系统上工作，或者你想要确保仓库中的行结束符保持一致，那么设置为 <code>false</code> 可能是合适的。如果你在 Windows 上工作，通常推荐使用 <code>true</code> 或 <code>input</code> 来避免行结束符的问题。</p>\n<h3 id=\"节点问题导致无法使用github\"><a href=\"#节点问题导致无法使用github\" class=\"headerlink\" title=\"节点问题导致无法使用github\"></a>节点问题导致无法使用github</h3><h4 id=\"在-HTTPS-端口使用-SSH\"><a href=\"#在-HTTPS-端口使用-SSH\" class=\"headerlink\" title=\"在 HTTPS 端口使用 SSH\"></a>在 HTTPS 端口使用 SSH</h4><p>有时，防火墙会完全拒绝允许 SSH 连接。 如果无法选择使用<a href=\"https://docs.github.com/zh/github/getting-started-with-github/caching-your-github-credentials-in-git\">具有凭据缓存的 HTTPS 克隆</a>，可以尝试使用通过 HTTPS 端口建立的 SSH 连接克隆。 大多数防火墙规则应允许此操作，但代理服务器可能会干扰。</p>\n<h4 id=\"本文内容\"><a href=\"#本文内容\" class=\"headerlink\" title=\"本文内容\"></a>本文内容</h4><ul>\n<li>启用通过 HTTPS 的 SSH 连接</li>\n<li>更新已知主机</li>\n</ul>\n<p>GitHub Enterprise Server 用户：目前不支持经 SSH 通过 HTTPS 端口访问 GitHub Enterprise Server。</p>\n<p>要测试通过 HTTPS 端口的 SSH 是否可行，请运行以下 SSH 命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ssh -T -p 443 git@ssh.github.com</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">Hi USERNAME! You<span class=\"string\">&#x27;ve successfully authenticated, but GitHub does not</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"string\">provide shell access.</span></span></span><br></pre></td></tr></table></figure>\n\n<p>注意：端口 443 的主机名为 <code>ssh.github.com</code>，而不是 <code>github.com</code>。</p>\n<p>如果这样有效，万事大吉！ 否则，可能需要<a href=\"https://docs.github.com/zh/authentication/troubleshooting-ssh/error-permission-denied-publickey\">遵循我们的故障排除指南</a>。</p>\n<p>现在，若要克隆存储库，可以运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://git@ssh.github.com:443/YOUR-USERNAME/YOUR-REPOSITORY.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用通过-HTTPS-的-SSH-连接\"><a href=\"#启用通过-HTTPS-的-SSH-连接\" class=\"headerlink\" title=\"启用通过 HTTPS 的 SSH 连接\"></a><a href=\"https://docs.github.com/zh/authentication/troubleshooting-ssh/using-ssh-over-the-https-port#enabling-ssh-connections-over-https\">启用通过 HTTPS 的 SSH 连接</a></h4><p>如果你能在端口 443 上通过 SSH 连接到 <code>git@ssh.github.com</code>，则可覆盖你的 SSH 设置来强制与 GitHub.com 的任何连接均通过该服务器和端口运行。</p>\n<p>要在 SSH 配置文件中设置此行为，请在 <code>~/.ssh/config</code> 编辑该文件，并添加以下部分：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">    Hostname ssh.github.com</span><br><span class=\"line\">    Port 443</span><br><span class=\"line\">    User git</span><br></pre></td></tr></table></figure>\n\n<p>你可以通过再次连接到 GitHub.com 来测试这是否有效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ssh -T git@github.com</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">Hi USERNAME! You<span class=\"string\">&#x27;ve successfully authenticated, but GitHub does not</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"string\">provide shell access.</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新已知主机\"><a href=\"#更新已知主机\" class=\"headerlink\" title=\"更新已知主机\"></a><a href=\"https://docs.github.com/zh/authentication/troubleshooting-ssh/using-ssh-over-the-https-port#updating-known-hosts\">更新已知主机</a></h4><p>在切换到端口 443 后第一次与 GitHub 交互时，你可能会收到一条警告消息，指出在 <code>known_hosts</code> 中找不到主机，或者该主机由其他名称找到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">The authenticity of host <span class=\"string\">&#x27;[ssh.github.com]:443 ([140.82.112.36]:443)&#x27;</span> can<span class=\"string\">&#x27;t be established.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"string\">ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"string\">This host key is known by the following other names/addresses:</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"string\">    ~/.ssh/known_hosts:32: github.com</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"string\">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></span></span><br></pre></td></tr></table></figure>\n\n<p>假设 SSH 指纹与 GitHub 发布的指纹之一匹配，那么可以针对这个问题安全地回答“是”。 有关指纹列表，请参阅“<a href=\"https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">GitHub 的 SSH 密钥指纹</a>”。</p>\n<p>按 <kbd>alt</kbd>+<kbd>up</kbd>激活</p>\n<h4 id=\"帮助和支持\"><a href=\"#帮助和支持\" class=\"headerlink\" title=\"帮助和支持\"></a>帮助和支持</h4><h3 id=\"GitHub图床\"><a href=\"#GitHub图床\" class=\"headerlink\" title=\"GitHub图床\"></a>GitHub图床</h3><blockquote>\n<ul>\n<li>PicGo+Typora+GitHub</li>\n</ul>\n</blockquote>\n<ol>\n<li><h4 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h4></li>\n<li><h4 id=\"创建GitHub中的Token\"><a href=\"#创建GitHub中的Token\" class=\"headerlink\" title=\"创建GitHub中的Token\"></a>创建GitHub中的Token</h4><ul>\n<li>点击头像，选中头像列表中的Settings,</li>\n<li>进入Settings,点击Developer Settings</li>\n<li>点击Personal access tokens 过后再点击 Generate new token</li>\n<li>生成token，记住这个令牌一定要复制保存，如果没有保存的删除重新来一遍</li>\n</ul>\n<img src=\"../../../../Users/Tom/Desktop/44733429dc7b631c603cea37a7ec899c.png\" alt=\"44733429dc7b631c603cea37a7ec899c\" style=\"zoom:50%;\" /></li>\n</ol>\n<img src=\"../../../../Users/Tom/Desktop/bb12116ca91de4bff54619ad7f8c3358.png\" alt=\"bb12116ca91de4bff54619ad7f8c3358\" style=\"zoom:50%;\" />\n\n<p><img src=\"/project/../../../../Users/Tom/Desktop/36c743544cc4fe57c6c34cd55d49516d.png\" alt=\"36c743544cc4fe57c6c34cd55d49516d\"></p>\n<img src=\"../../../../Users/Tom/Desktop/1472545cbfc5d781e004a855bb99236c.png\" alt=\"1472545cbfc5d781e004a855bb99236c\" style=\"zoom:50%;\" />\n\n\n\n<p><img src=\"../../../../Users/Tom/Desktop/539784de08f89d2203c85b41154e73d9.png\" alt=\"539784de08f89d2203c85b41154e73d9\" style=\"zoom: 50%;\" /><img src=\"../../../../Users/Tom/Desktop/095cb8ac2973044902be360ccd92cd38.png\" alt=\"095cb8ac2973044902be360ccd92cd38\" style=\"zoom:50%;\" /></p>\n","feature":false,"text":"**GitHub **GitHub命令配置密匙步骤： ​ ①生成客户端公私玥文件 ​ 生成公私玥对指令（需先自行安装OpenSSH）： 1ssh-keygen ...","permalink":"/post/基础/Github","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GitHub\"><span class=\"toc-text\">**GitHub **</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GitHub%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">GitHub命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%AF%86%E5%8C%99\"><span class=\"toc-text\">配置密匙</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">全局配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">删除全局配置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%A6%96%E6%AC%A1%E6%8E%A8%E9%80%81%E5%88%B0GitHub\"><span class=\"toc-text\">将本地仓库首次推送到GitHub</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E9%80%81%E8%A1%8C%E6%8F%90%E7%A4%BA%E7%AC%A6%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">推送行提示符问题</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8A%82%E7%82%B9%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8github\"><span class=\"toc-text\">节点问题导致无法使用github</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8-HTTPS-%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8-SSH\"><span class=\"toc-text\">在 HTTPS 端口使用 SSH</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E6%96%87%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">本文内容</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E7%94%A8%E9%80%9A%E8%BF%87-HTTPS-%E7%9A%84-SSH-%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">启用通过 HTTPS 的 SSH 连接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E5%B7%B2%E7%9F%A5%E4%B8%BB%E6%9C%BA\"><span class=\"toc-text\">更新已知主机</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%AE%E5%8A%A9%E5%92%8C%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">帮助和支持</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GitHub%E5%9B%BE%E5%BA%8A\"><span class=\"toc-text\">GitHub图床</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">创建仓库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAGitHub%E4%B8%AD%E7%9A%84Token\"><span class=\"toc-text\">创建GitHub中的Token</span></a></li></ol></li></ol></li></ol>","author":{"name":"Oraw","slug":"blog-author","avatar":"https://raw.githubusercontent.com/anaconda110/MyPic/img/img/16991083173741774.jpg","link":"/","description":"我只身前行，却仿佛带着一万雄兵。","socials":{"github":"https://anaconda110.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"windows命令行与批处理","uid":"6ee490786533527d28bf76950334c3d2","slug":"基础/windows命令行与批处理","date":"2024-08-03T09:28:21.000Z","updated":"2025-06-28T08:24:42.438Z","comments":true,"path":"api/articles/基础/windows命令行与批处理.json","keywords":null,"cover":"https://cover.png","text":"命令行cmd与PowerShellcmd是power shell的子集。 说明 不区分大小写 按上下键可以查看历史命令 Tab键可以自动补全 使用/?或/hel...","permalink":"/post/基础/windows命令行与批处理","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"基础","slug":"基础","count":3,"path":"api/categories/基础.json"}],"tags":[{"name":"语法","slug":"语法","count":3,"path":"api/tags/语法.json"},{"name":"基础","slug":"基础","count":2,"path":"api/tags/基础.json"}],"author":{"name":"Oraw","slug":"blog-author","avatar":"https://raw.githubusercontent.com/anaconda110/MyPic/img/img/16991083173741774.jpg","link":"/","description":"我只身前行，却仿佛带着一万雄兵。","socials":{"github":"https://anaconda110.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"摘抄","uid":"24b3e8d3afb3fd1ff02440678426f175","slug":"总结/摘抄","date":"2024-07-31T16:19:12.000Z","updated":"2025-06-28T08:24:42.439Z","comments":true,"path":"api/articles/总结/摘抄.json","keywords":null,"cover":"https://cover.png","text":" 恒大运营模式：收益私有化，成本社会化，风险全民化 少数人无法奴役多数人，少数人能奴役多数人是因为多数人中有多数人想成为少数人 群体盲从意识会淹没个体的理性，个...","permalink":"/post/总结/摘抄","photos":[],"count_time":{"symbolsCount":120,"symbolsTime":"1 mins."},"categories":[{"name":"-总结","slug":"总结","count":1,"path":"api/categories/总结.json"}],"tags":[{"name":"总结","slug":"总结","count":1,"path":"api/tags/总结.json"}],"author":{"name":"Oraw","slug":"blog-author","avatar":"https://raw.githubusercontent.com/anaconda110/MyPic/img/img/16991083173741774.jpg","link":"/","description":"我只身前行，却仿佛带着一万雄兵。","socials":{"github":"https://anaconda110.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}