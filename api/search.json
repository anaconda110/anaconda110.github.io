[{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"基础/hello-world","date":"2025-06-26T06:00:23.091Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f43832c0290c7241f3fe750b8747ba36","title":"{{title}}","content":"","slug":"scaffolds/page","date":"2025-06-26T06:00:23.091Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f43832c0290c7241f3fe750b8747ba36","title":"{{title}}","content":"","slug":"scaffolds/draft","date":"2025-06-26T06:00:23.091Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"c3e183fc2bf9eda0ba62fc2811e4addd","title":"CUPS","content":"一、打印功能家里有一台 HP LaserJet M1005 MFP 古董打印机，只有usb接口，本来是通过windows电脑实现家庭局域网共享的。在电脑上安装Air Printert软件，可以实现苹果手机无线打印。不过每次打印都要开电脑，比较麻烦。也不可能为了个打印机电脑24小时开机。最近折腾了一下，通过N1盒子安装cups，实现了无线打印，记录一下，以免以后自己忘了怎么操作。\n过程主要参考恩山论坛大佬jysky的文章《[N1盒子] docker安装cups让打印机实现无线打印（支持PC、IOS、安卓airprint）》\n另外还参考了这篇文章：openwrt软路由（x86）做打印服务器，用docker安装cups&#x2F;airprint_NAS存储_什么值得买\n将打印机连接到N1的usb接口。\n进入openwrt——系统——TTYD终端，输入以下代码：\n123456789101112docker run \\       --name=cups \\       --restart=always \\       --net=host \\       -v /var/run/dbus:/var/run/dbus \\       -v ~/airprint_data/config:/config \\       -v ~/airprint_data/services:/services \\       --device /dev/bus \\       --device /dev/usb \\       -e CUPSADMIN=&quot;admin&quot; \\       -e CUPSPASSWORD=&quot;password&quot; \\       jysky007/cups:v1\n\n\n此容器只支持N1、贝壳云、我家云、粒子云、等arm处理器的机器。\n浏览器打开192.168.XXX.XXX:631 （前面为N1盒子ip地址，端口631）进入cups管理界面。cups的默认用户名和密码是print&#x2F;print，不过看上面的代码，大佬已经把用户名和密码改成admin&#x2F;password了。\n之后点击Add Printer，选择自己的打印机，再选择驱动，N1等ARM处理器的要选带Foomatic&#x2F;foo2xqx字样的驱动，别的驱动是适配X86的。\n\n后面全部默认，最后完成打印机添加。\n大佬的帖子中PC端直接搜索打印机就能搜到，我自己的情况不行，需要手动添加，win7和win10方法一样：\n设备和打印机——添加打印机——添加网络、无线或Bluetooth打印机——我需要的打印机不再列表中——按名称选择共享打印机——http://192.168.XXX.XXX:631/printers/HP_LaserJet_M1005——添加驱动。 \n如果windows提供的列表中没有匹配的驱动（比如我的古董打印机），可以去Microsoft Update Catalog 搜索打印机型号，我搜索的是M1005，选择合适的驱动下载。\n下载下来的cab文件解压缩，里边包含inf安装文件。\n接着上面的添加驱动——从磁盘安装——浏览找到cab文件里的HPLJM1005.INF——完成驱动安装。如此windows电脑端打印机就添加成功了。\nHP打印机的驱动安装方法可以参考下面的文章：HP LaserJet - 在 Windows 10 电脑上，通过网络安装面向 HP 打印机的 Windows 驱动程序 | HP®客户支持\niOS端能直接搜索到打印机，不用安装第三方软件。没有安卓手机，未测试，大佬帖子里说也能直接搜到。\n最后，大佬帖子中提到打印机如果断电再开机， 发送打印任务就无法打印了，必须重启cups。\n二、扫描功能最近发现上述操作只能实现无线打印，但无法使用扫描功能。网上搜了一下，也有能实现扫描的docker镜像，是通过SANE实现的。\n网址如下，里面有详细介绍：\nhttps://github.com/sbs20/scanservjs\n项目SANE的网址如下：\nSANE - Scanner Access Now Easy\n安装方法一样，进入openwrt——系统——TTYD终端，输入以下代码：\n123456789docker pull sbs20/scanservjs:latestdocker rm --force scanservjs-container 2&gt; /dev/nulldocker run -d \\  -p 8080:8080 \\  -v /var/run/dbus:/var/run/dbus \\  --net=host \\  #此行是我自己添加的，默认bridge模式貌似无法访问，改成host模式可行  --restart unless-stopped \\  --name scanservjs-container \\  --privileged sbs20/scanservjs:latest\n\n\n浏览器打开192.168.XXX.XXX:8080 （前面为N1盒子ip地址，端口8080）进入扫描管理界面，即可直接扫描。\n另外docker网络模式参看下文：Docker学习：容器五种(3+2)网络模式 | bridge模式 | host模式 | none模式 | container 模式 | 自定义网络模式详解_docker的五种网络模式总结_血煞长虹的博客-CSDN博客\n三、常见问题问题1：打印机一旦关机再开机默认就不能用了，必须重新去luci里面重启cups服务才行，如何解决？\n&#x2F;etc&#x2F;hotplug.d&#x2F;usb&#x2F;10-usb_printer文件里面添加\n12sleep 10    /root/cupsstart.sh\n\n然后到&#x2F;root目录添加脚本cupsstart.sh\n12#!/bin/shdocker restart cups\n\n\n把脚本的权限改为0777\n问题2：N1在openwrt的docker中运行的cups，如何实现开启打印机自动启动？\n第一步：找到目录&#x2F;etc&#x2F;hotplug.d&#x2F;usb，里面有一个10-usb_printer的文件，使用命令：\n1vi /etc/hotplug.d/usb/10-usb_printer\n\n\n\n打开文件后修改里面的内容为：\n12345if [ x&quot;$INTERFACE&quot; = x&quot;7/1/1&quot; ] || [ x&quot;$INTERFACE&quot; = x&quot;7/1/2&quot; ]; then        /usr/bin/usb_printer_hotplug &quot;$PRODUCT&quot; &quot;$ACTION&quot;              sleep 10                  /root/cupsstart.shfi\n\n\n第二步：进入root目录，新建cupsstart.sh文件，命令为：vi cupsstart.sh，然后修改其内容为\n12#!/bin/shdocker restart cups\n\n保存，设置文件权限为0775，命令为：chmod 0775 cupsstart.sh第三步，把打印机关闭后再开机，等待十几秒后，再看看是不是又可以愉快的打印了！此方法在打印机开机时，会触发docker中的cups自动运行，关机时，cups也会自动运行，但是因为找不到打印机，所以此时的cups是不能正常工作的，相当于打印机关机的效果。\n问题3：docker容器时区不对导致时间不对\n最近又遇到一个问题，docker容器部署cups，发现时间少了8个小时，于是想到是docker容器的内部时区问题。docker容器一般是debian系统，默认是UTC标准时间。可通过以下命令修改docker时区：\n1234# 1.先进容器内部docker exec -it 容器ID bash   # 2.设置上海时间cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n如果进入容器修改的时候总是报&#x2F;etc&#x2F;localtime 文件只读，不让修改，也可以用以下命令：\ndocker cp /etc/localtime:容器ID/etc/localtime\n","slug":"折腾/CUPS","date":"2024-08-09T13:33:28.000Z","categories_index":"折腾","tags_index":"opwrt","author_index":"Aurora"},{"id":"19f44eeb22786c1b4f14b8438170f809","title":"Python股票交易从入门到实践","content":"python语法1.目录结构\n​\t通常一个包由_init_.py和其他诸多.py文件构成。_init_.py是包的标志性文件，Python解释器通过\n","slug":"培训班/Python股票交易从入门到实践","date":"2024-08-05T11:39:24.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"6ee490786533527d28bf76950334c3d2","title":"windows命令行与批处理","content":"命令行cmd与PowerShellcmd是power shell的子集。\n说明\n不区分大小写\n按上下键可以查看历史命令\nTab键可以自动补全\n使用/?或/help可以查看命令用法，用法中的[]代表可选\n命令基本格式命令 参数列表 \n\n基本命令\n\n\n命令\n功能\n举例\n\n\n\necho\n显示\n\n\n\npause\n暂停\npause &gt; nul\n\n\ncls\n清屏\n\n\n\nexit\n退出\n\n\n\n常用命令\n\n\n命令\n功能\n举例\n\n\n\ntype\n显示文件内容\ntype 1.txt\n\n\nfind\n查找字符串\nfind &quot;abc&quot; 2.txt\n\n\nfc\n比较文件内容\nfc 1.txt 2.txt\n\n\ndate\n显示&#x2F;修改日期\ndate /T\n\n\ntime\n显示&#x2F;修改时间\ntime /T\n\n\nping\n网络连接测试\nping www.baidu.com\n\n\nipconfig\nTCP&#x2F;IP信息\n\n\n\nset /a\n计算表达式\nset /a 6%4\n\n\nshutdown\n关机\nshutdown /s /t 60\n\n\n多命令1234567&amp;  顺序执行多条命令，不管命令是否执行成功&amp;&amp; 顺序执行多条命令，前面的命令错误则不执行后面的命令|| 顺序执行多条命令，碰到执行正确的命令后将不执行后面的命令abc &amp; dir &amp; bcdabc &amp;&amp; dir &amp;&amp; bcdabc || dir || bcd\n\n重定向1234567&gt;  输出重定向&gt;&gt; 追加重定向&lt;  输入重定向date /t &gt; 1.txttime /t &gt;&gt; 1.txtfind &quot;/&quot; &lt; 1.txt\n\n管道123| 前一个命令的输出作为后一个命令的输入dir | find &quot;txt&quot;\n\n文件操作命令路径分隔符：\\\n当前目录：.\n上一级目录：..\n\n\n\n命令\n功能\n举例\n\n\n\ndir\n显示文件夹内容\ndir /A\n\n\ntree\n显示文件夹树形结构\ntree /F\n\n\n盘符:\n进入指定磁盘\nc: d:\n\n\ncd\n切换目录\ncd test cd ..\n\n\nmkdir或md\n创建目录\nmkdir test\n\n\nrmdir或rd\n删除目录\nrmdir test\n\n\ndel\n删除文件\ndel 1.txt del /q/a/f *.txt\n\n\nrename或ren\n重命名\nrename a.txt b.txt\n\n\ncopy\n复制文件\ncopy a\\1.txt b\\1.txt\n\n\nmove\n移动文件&#x2F;重命名\nmove a\\1.txt 2.txt\n\n\n批处理基本结构123@echo off\t\t# 关闭回显......pause\t\t\t# 暂停。或 pause &gt; nul\n\n运行方式\n双击运行\n在cmd中运行（可以传参）\n\n变量123456789101112131415161718# 设置变量set 变量名=变量值set /a 变量名=表达式# 取消变量set 变量名=# 打印变量set 变量名# 列出变量set# 引用变量%变量名%# 输入变量值set /p 变量名=提示文字\n\n预定义的变量\n\n\n变量名\n值\n\n\n\n%cd%\n当前目录\n\n\n%date%\n当前日期\n\n\n%time%\n当前时间\n\n\n%random%\n0~32767之间的随机数\n\n\n%path%\n环境变量\n\n\n%errorlevel%\n上一个命令的返回值，0表示执行成功\n\n\n%0、%1、%2……\n参数。%0表示命令名\n\n\n调用1call 可执行文件 [参数列表]\n\n条件1234567891011121314151617181920if [not] 条件 (\t语句块) else (\t语句块)# 条件：errorlevel number\t# 上一个程序的返回值大于等于number则为truestring1==string2\t# 两个字符串匹配则为trueexist filename\t\t# 文件名存在则为true[/I] string1 compare-op string2\t\t# 比较数值或字符串\t# /I\t忽略大小写\t# compare-op包括：\t#\tequ\t等于\t# \tneq\t不等于\t#\tlss\t小于\t#\tleq\t小于等于\t#\tgtr\t大于\t#\tgeq\t大于等于defined variable\t# 如果定义了该变量则为true\n\n跳转12goto label\t\t# 跳转到标签所在行:label\t\t\t# 标签以冒号开头\n\n循环基本语法\n123456789for %%i in (set) do (\t语句块)# 循环变量用 %% 指定，只能是单字母# set表示文件集合（也可以是空文件），元素之间以逗号或空格分隔，支持通配符for %%i in (a,b,c) do (echo %%i)for %%i in (*.*) do (echo %%i)\n\n扩展语法\n\n只遍历文件夹\n  1for /d %%i in (set) do\n\n遍历指定文件夹下的所有文件，不指定则表示当前目录。如果set为.表示枚举目录树\n  1234for /r [[drive:]path] %%i in (set) dofor /r %%i in (*) do (echo %%i)for /r d:\\up %%i in (.) do (echo %%i)\n\n遍历数字序列\n  1for /l %%i in (start,step,end) do\n\n遍历文件内容\n  1for /f [&quot;options&quot;] %%i in (set) do\n\n通配符12?\t\t# 单个字符*\t\t# 任意字符\n\n例子按顺序为文件夹中的文件命名。\n批处理中for循环的自增自减问题_Dandelion_gong的博客-CSDN博客_bat for 自增\n12345678@echo offsetlocal enabledelayedexpansionset cnt=0for %%i in (%1) do (    rename %%i !cnt!.txt    set /a cnt=!cnt! + 1)pause\n\n\n\n","slug":"折腾/windows命令行与批处理","date":"2024-08-03T09:28:21.000Z","categories_index":"折腾","tags_index":"","author_index":"Aurora"},{"id":"cfec8a278520f5c5c2d4f82888a3abb7","title":"经验总结","content":"**GitHub **GitHub命令配置密匙步骤：\n​     ①生成客户端公私玥文件\n​      生成公私玥对指令（需先自行安装OpenSSH）：\n1ssh-keygen -t rsa -C &quot;注册邮箱&quot;\n\n\n\n​     ②将公钥上传到Github\n\n全局配置12$ git config --global user.name &quot;用户名&quot;$ git config --global user.email &quot;邮箱地址&quot;\n\n删除全局配置要删除本地全局设置的 Git 邮箱，你可以使用 git config 命令并指定 --global 选项来移除全局配置中的邮箱地址。以下是具体步骤：\n\n打开命令行或终端。\n\n输入以下命令来列出当前的全局 Git 配置，以确认你的全局邮箱地址：\n1git config --global --list\n\n找到设置邮箱的行，它看起来像这样：\n12plaintextuser.email=your_email@example.com\n\n使用以下命令来删除全局配置中的邮箱地址：\n1git config --global --unset user.email\n\n再次使用 --list 选项来确认邮箱地址已经被删除：\n1git config --global --list\n\n将本地仓库首次推送到GitHub1234567echo &quot;#hexo-blog&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git branch -M maingit remote add origin git@github.com:anaconda110/hexo-blog.gitgit push -u origin main\n\n\n\n\n\n推送行提示符问题要让 Git 在处理行结束符时不对它们做出更改，你需要设置 core.autocrlf 配置选项为 false。这会告诉 Git 不要在提交时将行结束符从 LF 转换为 CRLF，也不会在检出时将它们从 CRLF 转换回 LF。\n以下是如何在 Git 中设置此选项的步骤：\n\n打开命令行或终端。\n\n输入以下命令来设置 core.autocrlf 为 false。这将应用到当前仓库：\n1git config core.autocrlf false\n\n如果你想要为所有仓库设置这个选项，可以使用 --global 标志：\n1git config --global core.autocrlf false\n\n请注意，将 core.autocrlf 设置为 false 可能会导致在 Windows 系统上使用文本编辑器打开文件时出现不一致的行结束符。如果你在 Windows 上工作，通常建议将此选项设置为 true 或 input 以避免这些问题。\n\n设置为 true 会在检出到工作目录时转换 CRLF 为 LF，并在提交时转换 LF 回 CRLF。\n1git config --global core.autocrlf true\n\n设置为 input 会在提交时将 CRLF 转换为 LF，但不在检出时转换回 CRLF。\n1git config --global core.autocrlf input\n\n选择哪个选项取决于你的开发环境和个人偏好。如果你主要在 Unix-like 系统上工作，或者你想要确保仓库中的行结束符保持一致，那么设置为 false 可能是合适的。如果你在 Windows 上工作，通常推荐使用 true 或 input 来避免行结束符的问题。\n节点问题导致无法使用github在 HTTPS 端口使用 SSH有时，防火墙会完全拒绝允许 SSH 连接。 如果无法选择使用具有凭据缓存的 HTTPS 克隆，可以尝试使用通过 HTTPS 端口建立的 SSH 连接克隆。 大多数防火墙规则应允许此操作，但代理服务器可能会干扰。\n本文内容\n启用通过 HTTPS 的 SSH 连接\n更新已知主机\n\nGitHub Enterprise Server 用户：目前不支持经 SSH 通过 HTTPS 端口访问 GitHub Enterprise Server。\n要测试通过 HTTPS 端口的 SSH 是否可行，请运行以下 SSH 命令：\n123$ ssh -T -p 443 git@ssh.github.com&gt; Hi USERNAME! You&#x27;ve successfully authenticated, but GitHub does not&gt; provide shell access.\n\n注意：端口 443 的主机名为 ssh.github.com，而不是 github.com。\n如果这样有效，万事大吉！ 否则，可能需要遵循我们的故障排除指南。\n现在，若要克隆存储库，可以运行以下命令：\n1git clone ssh://git@ssh.github.com:443/YOUR-USERNAME/YOUR-REPOSITORY.git\n\n启用通过 HTTPS 的 SSH 连接如果你能在端口 443 上通过 SSH 连接到 git@ssh.github.com，则可覆盖你的 SSH 设置来强制与 GitHub.com 的任何连接均通过该服务器和端口运行。\n要在 SSH 配置文件中设置此行为，请在 ~/.ssh/config 编辑该文件，并添加以下部分：\n1234Host github.com    Hostname ssh.github.com    Port 443    User git\n\n你可以通过再次连接到 GitHub.com 来测试这是否有效：\n123$ ssh -T git@github.com&gt; Hi USERNAME! You&#x27;ve successfully authenticated, but GitHub does not&gt; provide shell access.\n\n更新已知主机在切换到端口 443 后第一次与 GitHub 交互时，你可能会收到一条警告消息，指出在 known_hosts 中找不到主机，或者该主机由其他名称找到。\n12345&gt; The authenticity of host &#x27;[ssh.github.com]:443 ([140.82.112.36]:443)&#x27; can&#x27;t be established.&gt; ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.&gt; This host key is known by the following other names/addresses:&gt;     ~/.ssh/known_hosts:32: github.com&gt; Are you sure you want to continue connecting (yes/no/[fingerprint])?\n\n假设 SSH 指纹与 GitHub 发布的指纹之一匹配，那么可以针对这个问题安全地回答“是”。 有关指纹列表，请参阅“GitHub 的 SSH 密钥指纹”。\n按 alt+up激活\n帮助和支持GitHub图床\n\nPicGo+Typora+GitHub\n\n\n\n创建仓库\n创建GitHub中的Token\n点击头像，选中头像列表中的Settings,\n进入Settings,点击Developer Settings\n点击Personal access tokens 过后再点击 Generate new token\n生成token，记住这个令牌一定要复制保存，如果没有保存的删除重新来一遍\n\n\n\n\n\n\n\n\n\n\n\n","slug":"总结/经验总结","date":"2024-08-02T09:28:21.000Z","categories_index":"总结","tags_index":"","author_index":"Aurora"},{"id":"22d3d245219ac5c858d00521dde4f9e9","title":"名句","content":"\n\n恒大运营模式：收益私有化，成本社会化，风险全民化\n\n少数人无法奴役多数人，少数人能奴役多数人是因为多数人中有多数人想成为少数人\n\n群体盲从意识会淹没个体的理性，个体一旦将自己归入该群体，其原本独立的理性就会被群体的无知疯狂淹没\n\n\n\n\nhdfh\n","slug":"总结/名句","date":"2024-07-31T16:19:12.000Z","categories_index":"总结","tags_index":"","author_index":"Aurora"},{"id":"2ea5b3c87e3dae783f9a95248180e98f","title":"CS61B","content":"目的\n\n通过gitlet获得完整写小项目经验\n学完61B可以学软件工程了\n\n\n中山大学操作系统课\n","slug":"公开课/CS61B","date":"2024-07-30T17:04:17.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"12c2781451aa457624501349bcf15a08","title":"乐尚代驾","content":"","slug":"培训班/乐尚代驾","date":"2024-07-23T21:35:24.000Z","categories_index":"培训班","tags_index":"黑马","author_index":"Aurora"},{"id":"ca5952bfad3c73b70d9d4e09ee5807a8","title":"CS61A","content":"目的\n\n别人经验\n\n深有体会，61a一开始英文文档读很吃力，后面常见词熟练了就感觉不那么难了\ntextbook一定要看\n61A除了python讲了很多东西\n很多知识觉得难很正常吧，没有基础，硬着头皮学就行了。当初学面向对象也就觉得继承那些概念很抽象。实在不行就跳过，后面在学\n\n\n","slug":"公开课/CS61A","date":"2024-07-23T21:28:20.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"a35bcd91868d87eeb1d5ee97d10a5a01","title":"Markdown","content":"Markdown字体123456789*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___~~删除线~~&lt;u&gt;带下划线文本&lt;/u&gt;[^要注明的文本]\n\n分隔线123456789**** * ******- - -----------\n\nMarkdown 列表 Markdown 支持有序列表和无序列表。无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：\n123456789101112* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项\n\n有序列表使用数字并加上 . 号来表示，如：\n1231. 第一项2. 第二项3. 第三项\n\n列表嵌套列表嵌套只需在子列表中的选项前面添加两个或四个空格即可：\n1234561. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素\n\nMarkdown 区块Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：\n123&gt; 区块引用&gt; 菜鸟教程&gt; 学的不仅是技术更是梦想\n\n另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：\n123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套\n\n区块中使用列表123456&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项\n\n列表中使用区块1234* 第一项    &gt; 菜鸟教程    &gt; 学的不仅是技术更是梦想* 第二项\n\nMarkdown 代码函数或片段如果是段落上的一个函数或片段的代码可以用反引号把它包起来（&#96;），例如：\n1`printf()` 函数\n\n代码区块代码区块使用 4 个空格或者一个制表符（Tab 键）。\n你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）\nMarkdown 链接12345678[链接名称](链接地址)  或者   &lt;链接地址&gt;这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址）  [1]: http://www.google.com/  [runoob]: http://www.runoob.com/\n\nMarkdown 图片1![RUNOOB 图标](https://static.jyshare.com/images/runoob-logo.png)\n\n\n1&lt;img src=&quot;https://static.jyshare.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt;\n\n\n\nMarkdown 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行\n1234|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |\n\n对齐方式1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |\n\nMarkdown 高级技巧支持的 HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如：\n1使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑\n\n使用 Ctrl+Alt+Del 重启电脑\n转义12**文本加粗** \\*\\* 正常显示星号 \\*\\*\n\n公式Markdown Preview Enhanced 使用 KaTeX 或者 MathJax 来渲染数学表达式。\nKaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions&#x2F;symbols 来了解 KaTeX 支持那些符号和函数。\n默认下的分隔符：\n\n$...$ 或者 \\(...\\) 中的数学表达式将会在行内显示。\n$$...$$ 或者 \\[...\\] 或者 &#96;&#96;&#96;&#96;math&#96; 中的数学表达式将会在块内显示。\n\n","slug":"基础/Markdown","date":"2024-07-22T18:09:46.000Z","categories_index":"基础","tags_index":"语法,基础","author_index":"Aurora"},{"id":"b4fac29b62ae1488296d17460e7cee1d","title":"博客搭建","content":"一、准备阶段环境准备12345sequenceDiagram    Alice-&gt;&gt;John: Hello John, how are you?    John--&gt;&gt;Alice: Great!    Alice-)John: See you later!\n\n12345678910111213141516171819202122232425262728293031flowchart TB%% 图的方向说明%% LR：从左到图，RL：从右到左，TB：从上到下，BT：从下到上%% 连续连接START([开始]) --&gt; pre1&#123;&#123;准备&#125;&#125; --&gt; node2[节点]pre1 --&gt; node1(可选)subgraph 子图subgraph 子图的子图%% 一对多node1 --&gt; join1&#123; &#125; join1 --&gt; |分支|groud1[[子流程]] &amp; database[(存档)] &amp; inpage1((&quot;A&lt;br&gt;(同页)&quot;)) %% click clickable &quot;#Mermaid 的状态机图&quot;end     node2 --&gt; data1[/数据/]node2 --&gt; data2[\\文件\\]node2 --&gt; data3(((双圈圆&lt;br&gt;点击可访问&lt;br&gt;Github)))click data3 &quot;https://www.github.com&quot; _blankend%% this is a commentgroud1 ==&gt; |重要分支|cond1&#123;&quot;判断？&quot;&#125;cond1 --&gt; |条件1|ENDcond1 --&gt; |条件2|B[/手工输入\\]cond1 --&gt; |条件3|B2[\\手动操作/]cond1 -.-&gt; |条件4|outpage2&gt;&quot;B (离页)&quot;]inpage2((&quot;A&lt;br&gt;(同页)&quot;)) --&gt; ENDEND([结束])\n","slug":"折腾/博客搭建","date":"2024-07-22T18:08:29.000Z","categories_index":"折腾","tags_index":"","author_index":"Aurora"}]